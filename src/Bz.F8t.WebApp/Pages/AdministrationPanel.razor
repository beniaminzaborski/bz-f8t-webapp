@page "/administration-panel"
@using Bz.F8t.WebApp.ApiClients.Dtos
@using Bz.F8t.WebApp.Components
@using Refit

@inject NavigationManager navManager
@inject ICompetitionApi competitionApi

<PageTitle>Feet On The Tarmac - Admininistration Panel</PageTitle>

<h3>Competitions</h3>

<div class="alert alert-danger alert-dismissible fade @(showAlert ? "show" : "")" role="alert">
    @alertMessage
    <button type="button" class="btn-close" @onclick="CloseAlert" aria-label="Close"></button>
</div>

<div class="btn-group" role="group" aria-label="Toolbar">
    <button type="button" class="btn btn-primary" @onclick="CreateCompetition">
        <i class="bi bi-plus-circle align-middle"></i>
        <span class="align-middle">Create competition</span>
    </button>
</div>
<div class="table-responsive">
    <table class="table table-striped table-hover caption-top align-middle">
        <caption>List of competitions</caption>
        <thead class="table-dark">
            <tr>
                <th scope="col">Start At</th>
                <th scope="col">Place</th>
                <th scope="col">Distance</th>
                <th scope="col">Max nb of competitors</th>
                <th scope="col">Status</th>
                <th scope="col">Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var competition in competitions)
            {
                <tr>
                    <td>@competition.StartAt.ToString("yyyy-MM-dd hh:mm")</td>
                    <td>@competition.Place.City</td>
                    <td>@competition.Distance.Amount @competition.Distance.Unit</td>
                    <td>@competition.MaxCompetitors</td>
                    <td>@competition.Status</td>
                    <td>
                        <div class="btn-group" role="group" aria-label="Actions">
                            <button type="button" class="btn btn-primary @(IsActionActive("Edit", competition.Status) ? "" : "disabled")" @onclick="@(() => EditCompetition(competition.Id))"><span class="bi bi-pencil-square"></span></button>
                            <button type="button" class="btn btn-success @(IsActionActive("OpenForRegistration", competition.Status) ? "" : "disabled")" @onclick="@(() => OpenForRegistrationAsync(competition.Id))"><span class="bi bi-skip-start-circle"></span></button>
                            <button type="button" class="btn btn-danger @(IsActionActive("CompleteRegistration", competition.Status) ? "" : "disabled")" @onclick="@(() => CompleteRegistrationAsync(competition.Id))"><span class="bi bi-stop-circle"></span></button>
                        </div>
                    </td>
                </tr>
            }
        </tbody>
    </table>
</div>

@code {
    private IEnumerable<CompetitionDto> competitions = new List<CompetitionDto>();
    private string alertMessage = string.Empty;
    private bool showAlert = false;

    protected override async Task OnInitializedAsync()
    {
        competitions = new List<CompetitionDto>
        {
            new CompetitionDto(Guid.NewGuid(), new DateTime(2023, 12, 06, 08, 30, 00), new DistanceDto(21, "Kilometers"), new CompetitionPlaceDto("Kraków", 0, 0), 4750, "Closed", Array.Empty<CheckpointDto>()),
            new CompetitionDto(Guid.NewGuid(), new DateTime(2024, 01, 01, 08, 30, 00), new DistanceDto(10, "Kilometers"), new CompetitionPlaceDto("Kielce", 0, 0), 1500, "RegistrationCompleted", Array.Empty<CheckpointDto>()),
            new CompetitionDto(Guid.NewGuid(), new DateTime(2024, 01, 02, 11, 00, 00), new DistanceDto(21, "Kilometers"), new CompetitionPlaceDto("Warszawa", 0, 0), 8000, "OpenedForRegistration", Array.Empty<CheckpointDto>()),
            new CompetitionDto(Guid.NewGuid(), new DateTime(2024, 02, 10, 09, 00, 00), new DistanceDto(42, "Kilometers"), new CompetitionPlaceDto("Poznań", 0, 0), 1500, "OpenedForRegistration", Array.Empty<CheckpointDto>()),
            new CompetitionDto(Guid.NewGuid(), new DateTime(2024, 02, 10, 10, 00, 00), new DistanceDto(21, "Kilometers"), new CompetitionPlaceDto("Łódź", 0, 0), 1500, "Draft", Array.Empty<CheckpointDto>())
        };

        //await FetchDataAsync();
    }

    private async Task FetchDataAsync()
    {
        try
        {
            var response = await competitionApi.GetAllCompetitionsAsync();
            if (response.IsSuccessStatusCode)
            {
                competitions = response.Content;
                competitions = competitions.OrderByDescending(c => c.StartAt).ToList();
            }
            else
            {
                ShowAlert(response.Error.Message);
            }
        }
        catch (Exception ex)
        {
            ShowAlert(ex.Message);
        }
    }

    private void CreateCompetition()
    {
        navManager.NavigateTo("administration-panel/competition");
    }

    private void EditCompetition(Guid competitionId)
    {
        navManager.NavigateTo($"administration-panel/competition/{competitionId}");
    }

    private async Task OpenForRegistrationAsync(Guid competitionId)
    {
        try
        {
            var response = await competitionApi.OpenCompetitionRegistrationAsync(competitionId);
            if (!response.IsSuccessStatusCode)
            {
                ShowAlert(response.Error.Message);
            }
        }
        catch (Exception ex)
        {
            ShowAlert(ex.Message);
        }
    }

    private async Task CompleteRegistrationAsync(Guid competitionId)
    {
        try
        {
            var response = await competitionApi.CompleteCompetitionRegistrationAsync(competitionId);
            if (!response.IsSuccessStatusCode)
            {
                ShowAlert(response.Error.Message);
            }
        }
        catch (Exception ex)
        {
            ShowAlert(ex.Message);
        }
    }

    private bool IsActionActive(string actionName, string status) =>
        actionName switch
        {
            "Edit" => status != "Closed" && status != "RegistrationCompleted",
            "OpenForRegistration" => status == "Draft",
            "CompleteRegistration" => status == "OpenedForRegistration"
        };

    private void CloseAlert() => showAlert = false;

    private void ShowAlert(string message)
    {
        alertMessage = message;
        showAlert = true;
    }
}
